\documentclass{beamer}
%\usetheme{metropolis}
\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{graphicx}
\usepackage{array,booktabs,tabularx}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\usepackage{url}

\newcommand\Fontvi{\fontsize{6}{7.2}\selectfont}

\title{Przewidywanie właściwości sekwencji biologicznych w oparciu o analizę n-gramów}
\date{}
\author{Michał Burdukiewicz}
\institute{Zakład Genomiki i Bioinformatyki, Uniwersytet Wrocławski}

\begin{document}

  <<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

library(dplyr)
library(reshape2)
library(xtable)
library(biogram)
library(seqinr)
library(VennDiagram)
  
source("script.R")  

print_bt <- function(x) {
  rws <- 0L:(nrow(x) - 1)
  col <- c("\\rowcolor{green!10}", "\\rowcolor{blue!10}", "\\rowcolor{red!10}", "\\rowcolor{yellow!10}")
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE)
}

print_bt2 <- function(x) {
  rws <- seq(1, nrow(x) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE, include.rownames = FALSE)
}  
  
cls <- c("\\colorbox{green!10}", "\\colorbox{blue!10}", "\\colorbox{red!10}", "\\colorbox{yellow!10}")

group2df <- function(group_list, caption = NULL, label = NULL) {
  tab <- data.frame(Groups = sapply(group_list, function(i)
    paste0(toupper(sort(i)), collapse = ", ")))
  tab <- cbind(ID = 1L:nrow(tab), tab)
  rws <- seq(1, nrow(tab) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  colnames(tab) <- c("Subgroup ID", "Amino acids")
  res <- print(xtable(tab, caption = caption, label = label), 
               include.rownames = FALSE, booktabs = TRUE,
               add.to.row = list(pos = as.list(rws), command = col), print.results = FALSE, 
               caption.placement = "top", sanitize.text.function = identity, 
               sanitize.rownames.function = identity)
  #res
  print(xtable(tab))
}  
  
amyloids_plot <- read.csv("amyloid_plot_data.csv")

levels(amyloids_plot[["et"]]) <- c("Best-performing simplified alphabet", 
                                   "simplified alphabet", "Full alphabet", 
                                   "Standard simplified alphabet")


amyloids_plot[["len_range"]] <- factor(amyloids_plot[["len_range"]], 
                                       levels = c("Test peptide length: 6 ", "Test peptide length: 7-10", 
                                                  "Test peptide length: 11-15", "Test peptide length: 16-25"))

subdat <- filter(amyloids_plot, pos == "Training peptide length: 6")

best_enc <- list(c("G"), 
                 c("K", "P", "R"),
                 c("I", "L", "V"),
                 c("F", "W", "Y"),
                 c("A", "C", "H", "M"),
                 c("D", "E", "N", "Q", "S", "T"))
names(best_enc) <- 1L:6


@
  

\maketitle

\begin{frame}{Przedmiot pracy}

\tableofcontents

\end{frame} 

\begin{frame}{} 

\textit{In silico} research allows scientists to more efficiently design experimental studies.

Examples: 

\begin{itemize}
\item prediction of protein properties (presence of signal peptides, amyloidogenicity),  
\item predicting culture conditions of bacteria.
\end{itemize}

\end{frame}   
  
\begin{frame}{Aim} 

Create efficient methods for analysis of biological sequences that have human-readable decision rules.

\end{frame}   


\begin{frame}{Amyloid proteins}

Amyloid are proteins associated with various diseases (e.g., Alzheimer’s,
Creutzfeldt-Jakob’s and Huntington’s diseases) which are able to form harmful aggregates.

\begin{figure} 
\includegraphics[width=0.61\textwidth]{static_figure/amyloid_aggregates.jpg}
\end{figure}

\footnotesize
Amyloid aggregates (red) around neurons (green). Strittmatter Laboratory, Yale University.

\end{frame}  

  
\begin{frame}{Amyloid proteins}

Hot-spots:
\begin{itemize}
\item short (6-15 amino acids),
\item very high variability of amino acid composition,
\item initiate amyloid aggregation,
\item create specific "zipper-like" $\beta$-structures.
\end{itemize}

\begin{figure} 
\includegraphics[width=0.9\textwidth]{static_figure/zipper_structure.jpg}
\end{figure}

\footnotesize\citet{sawaya_atomic_2007}
\end{frame}
  
\begin{frame}{Signal peptides}

\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}

Signal peptides:
        \begin{itemize}[<+->]
          \item are short (20-30 residues) N-terminal amino acid sequences forming $\alpha$-helices,
            \item direct proteins to the endomembrane system and next to extra- or intracellular localizations,
            \item are universal enough to direct properly proteins in different secretory systems.
        \end{itemize}
\end{frame}


  
\begin{frame}{Signal peptides}

\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}

Signal peptides possess three distinct domains with variable length and characteristic amino acid composition~\citep{hegde_surprising_2006}:
      \begin{itemize}
        \item n-region: mostly basic residues~\citep{nielsen_prediction_1998},
        \item h-region: strongly hydrophobic residues~\citep{nielsen_prediction_1998},
        \item c-region: a few polar, uncharged residues.
      \end{itemize}
\end{frame}


%Peptydy sygnałowe rozpoczynają się naładowanym dodatnio n-regionem, po którym występuje hydrofobowy h-region i c-region zakończony miejscem cięcia rozpoznawanym przez peptydazę sygnałową. 

  
\begin{frame}{Signal peptides}  
Amino acid composition of signal peptides differ between Plasmodium sp. and other eukaryotes. Therefore, predictors of signal peptides do not detect malarial signal peptides accurately.

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
plot_pca(pca_full)
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides.
\end{frame}  

\section{n-grams}

\begin{frame}
Computational analysis of biological sequences requires converting them to features understandable by machines.

The optimal conversion of information:
\begin{itemize}
\item loss-less,
\item concise.
\end{itemize}
\end{frame}  

\begin{frame}
n-grams (k-tuples, k-mers):
\begin{itemize}
\item subsequences (continuous or gapped) of $n$ residues,
\item considers the context of a specific residue.
\end{itemize}


<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seqs <- read.fasta("./data/seqs.fasta", seqtype = "AA")
seq_df <- lapply(seqs, function(i) i[1L:27]) %>% 
  do.call(rbind, .) %>% 
  cbind(name = sub(">", "", sapply(seqs, function(i) attr(i, "Annot"))), .) %>% 
  data.frame

colnames(seq_df)[-1] <- paste0("P", 1L:27)

mseq_df <- melt(seq_df, id.vars = "name",
     value.name = "aa", variable.name = "pos") %>% 
  mutate(aa = factor(aa, levels = a()[-1])) %>% 
  mutate(pos = as.numeric(sub("P", "", pos))) %>% 
  mutate(name = factor(gsub(" ", "\n", name))) %>% 
  mutate(name = relevel(name, "Plasmodium\nfalciparum")) %>% 
  mutate(sig = pos == "25") %>% 
  inner_join(data.frame(aa = a()[-1], hydr = aaprop[2, ]))

sample_seq <- as.matrix(seq_df[, 2L:10])
colnames(sample_seq) <- paste0("P", 1L:ncol(sample_seq))
rownames(sample_seq) <- paste0("S", 1L:4)
sample_seq_dat <- data.frame(sample_seq)

print(xtable(sample_seq_dat[1, 1L:5], include.rownames = FALSE, booktabs = TRUE))
@


2-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 2, aa_v, d = 0) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " - ", x = .) %>% 
  cat(sep = ", ")
@

2-grams (gap 1):
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 2, aa_v, d = 1) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " -- ", x = .) %>% 
  cat(sep = ", ")
@

3-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 3, aa_v, d = 0) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " -- ", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}  



\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
L <- 5
m <- 20 
m2 <- 6
n <- 1:5
n_max <- L*m^n
n_max2 <- L*m2^n
#dat <- data.frame(n = c(n, n), n_max = c(n_max, n_max2), m = c(rep(m, 5), rep(m2, 5)))
dat <- data.frame(n = n, n_max = n_max, m = rep(m, 5))
dat[["m"]] <- factor(dat[["m"]])

ggplot(dat, aes(x = n, y = n_max, color = m, label = formatC(n_max, digits = 4))) + 
  geom_line(linetype="dotted", size=1.5) + 
  geom_point(size=4, shape=16) +
  geom_text(size = 4, vjust = -1.5, hjust = "inward", color = "red") +
  coord_cartesian(ylim = c(1, 4.5e7)) +
  scale_x_continuous("n", breaks = 0L:5) +
  scale_y_continuous("Total number of n-grams (log-scale)",
                     trans = "log10") +
  scale_color_discrete("Alphabet size") +
  my_theme
@
Longer n-grams are more informative, but create larger feature spaces, which are hard to process and analyze.
\end{frame}

\begin{frame}{Permutation Tests}
  Informative n-grams are usually selected using permutation tests.

During a permutation test we shuffle randomly class labels and compute a defined statistic (e.g. information gain). Values of statistic for permuted data are compared with the value of statistic for original data.

$$
\textrm{p-value} = \frac{N_{T_P > T_R}}{N} $$

$N_{T_P > T_R}$: number of cases, where $T_P$ (permuted test statistic) has more extreme values than $T_R$ (test statistic for original data).

$N$: number of permutations.
  \end{frame}

\begin{frame}{QuiPT}  

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=3.6,results='asis'>>=
load("data/times2.RData")

times_dat <- do.call(rbind, lapply(times, function(i) 
  t(sapply(i, function(j) {
    c(slow = unname(j[["slow"]]["elapsed"]),
      quick = unname(j[["quick"]]["elapsed"]))
  }))
)) %>% 
  data.frame %>% 
  mutate(size = sort(rep(1L:5*10, 10))) %>% 
  melt(id.vars = "size") %>% 
  group_by(size, variable) %>% 
  summarise(value = mean(value)) %>% 
  ungroup %>% 
  mutate(variable = factor(variable, labels = c("Permutation test", "QuiPT")))

ggplot(times_dat, aes(x = size, y = value, color = variable)) +
  geom_point() +
  geom_line(linetype = "dotted") +
  scale_y_continuous("Computation time [s]") +
  scale_x_continuous("Number of tested n-grams") +
  scale_color_manual("Test", values = c("red", "blue")) +
  my_theme
@

QuiPT (available as part of the \textbf{biogram} R package) is faster than classical permutation tests and returns exact p-values.
\end{frame}

\section{Simplified alphabets}

\begin{frame}
Simplified alphabets:
\begin{itemize}
\item are based on grouping amino acids with similar physicochemical properties,
\item ease computational analysis of a sequence~\citep{murphy_simplified_2000},
\item create more explicite models.
\end{itemize}
\end{frame}


\begin{frame}  
Two sequences that are drastically different considering their amino acids composition can have the same physicochemical properties.


<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq1 <- c("f", "k", "v", "w", "p", "d", "h", "g", "s", "g")
seq2 <- c("y", "m", "c", "i", "y", "r", "a", "q", "t", "n")
@

Sequence I: 

\texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}}

\medskip

Sequence II: 

\texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}}

\end{frame}  


\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq_dat <- rbind(data.frame(seq = "Sequence I", pos = 1L:10, 
                            aa = seq1, val = aaprop["ARGP820101", seq1]),
                 data.frame(seq = "Sequence II", pos = 1L:10, 
                            aa = seq2, val = aaprop["ARGP820101", seq2])) %>% 
  mutate(hydroph = val < 0.4)

ggplot(seq_dat, aes(x = factor(pos), y = val, label = toupper(aa), 
                    group = seq, colour = hydroph)) +
  geom_text(vjust = "outward", size = 4, show_guide = FALSE) +
  #geom_point(size = 0) +
  geom_line(linetype = "dotted", color = "black") +
  facet_wrap(~ seq, ncol = 1) +
  scale_x_discrete("Position") +
  scale_y_continuous("Hydrophobicity (Argos et al., 1982)", expand = c(.1, .1)) +
  #scale_color_discrete("Hydrofobowy")
  #guides(colour = guide_legend(override.aes = list(size=4))) +
  my_theme 
@

\end{frame}  

\begin{frame}
\begin{table}
\begin{tabular}{cl}
\toprule
Subgroup & Amino acid \\ 
\midrule
  1 & C, I, L, K, M, F, P, W, Y, V \\ 
\rowcolor[gray]{0.85}  2 & A, D, E, G, H, N, Q, R, S, T \\ 
\bottomrule
\end{tabular}
\end{table}

\begin{columns}
\begin{column}{0.44\textwidth}
 
Sequence I: \texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}} \textrightarrow

Sequence II: \texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}} \textrightarrow

\end{column}
\begin{column}{0.5\textwidth}  %%<--- here

\texttt{\Sexpr{paste0(c(rep(1, 5), rep(2, 5)), collapse = "")}}

\texttt{\Sexpr{paste0(c(rep(1, 5), rep(2, 5)), collapse = "")}}
\end{column}
\end{columns}
\end{frame}  



\section{Prediction of amyloidogenicity}

\begin{frame}{AmyloGram}
AmyloGram: n-gram based tool for prediction of amyloid proteins~\citep{burdukiewicz_prediction_2016}.
\end{frame}


    \begin{frame}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/ngram1.eps}
\end{figure}
  \end{frame}

\begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=

ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = NA, outlier.shape = 16, outlier.size = 3, color = NA, fill = NA) +
  geom_point(data = filter(subdat, et == "Full alphabet"), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 3) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[3], drop = TRUE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[3], drop = TRUE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@
AUC (Area Under the Curve) measures the performance of a classifier (1 - classifier always properly recognizes amyloid proteins, 0 - classifier never properly recognizes amyloid proteins).

\end{frame}


\begin{frame}
  Does amyloidogenicity depend on the exact sequence of amino acids?
  \end{frame}

\begin{frame}{Standard simplified amino acid alphabets}
To date, several simplified amino acid alphabets have been proposed, which have been applied to (among others) protein folding and protein structure prediction~\citep{kosiol_new_2004, melo_accuracy_2006}.
  \end{frame}
  
    \begin{frame}{Standard simplified amino acid alphabets}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/ngram2.eps}
\end{figure}


  \end{frame}


    \begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=
ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = NA, outlier.shape = 16, outlier.size = 3, color = NA, fill = NA) +
  geom_point(data = filter(subdat, et %in% c("Full alphabet", "Standard simplified alphabet")), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 3) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[3L:4], drop = TRUE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[3L:4], drop = TRUE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@

Standard simplified amino acid alphabets do not enhance discrimination between amyloidogenic and non-amyloidogenic proteins.
  
  \end{frame}


\begin{frame}{Novel simplified amino acid alphabets}

\begin{itemize}
\item 17 measures handpicked from AAIndex database: 
  \begin{itemize}
    \item size of residues, 
    \item hydrophobicity, 
    \item solvent surface area, 
    \item frequency in $\beta$-sheets,
    \item contactivity.
  \end{itemize}
  \item 524 284 amino acid simplified alphabets with different level of amino acid alphabet reduction (three to six amino acid groups).
  \end{itemize}

    \end{frame}
  
    \begin{frame}{Novel simplified amino acid alphabets}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/ngram3.eps}
\end{figure}
  \end{frame}



\begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=
subdat2 <- droplevels(filter(subdat, et != "Best-performing simplified alphabet"))

ggplot(subdat2, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = "grey", outlier.shape = 16, outlier.size = 3, color = "black", fill = "white") +
  geom_point(data = filter(subdat2, et %in% c("Full alphabet", "Standard simplified alphabet")), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 3) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[2L:4], drop = FALSE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[2L:4], drop = FALSE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@
  \small
Hinges of boxes correspond to 
the 0.25 and 0.75 quartiles. The bar inside the box represents the median. The 
gray circles correspond to the simplified alphabets with the AUC outside the 0.95 
confidence interval.

  
  \end{frame}


  
    \begin{frame}{The best-performing simplified alphabet}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=

ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = "grey", outlier.shape = 16, outlier.size = 3) +
  geom_point(data = filter(subdat, et != "simplified alphabet"), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 3) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15), drop = FALSE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue"), drop = FALSE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()
@
  \end{frame}

     \begin{frame}{The best-performing simplified alphabet}
   <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=
# cat(group2df(best_enc, caption = "The best-performing simplified alphabet."))
 @
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor[gray]{0.85}  2 & K, P, R \\ 
    3 & I, L, V \\ 
   \rowcolor[gray]{0.85}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
   \end{frame}

     \begin{frame}{The best-performing simplified alphabet}
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor[gray]{0.85}  2 & K, P, R \\ 
   \rowcolor{blue!20} 3 & I, L, V \\ 
   \rowcolor{blue!20}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
Group 3 and 4 - hydrophobic amino acids.  
   \end{frame}
  
  
     \begin{frame}{The best-performing simplified alphabet}
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor{red!20}  2 & K, P, R \\ 
    3 & I, L, V \\ 
   \rowcolor[gray]{0.85}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
Group 2 - charged breakers of $\beta$-structures.  
   
   \end{frame}  
   
\begin{frame}{Alphabet similarity and performance}
Is the best-performing simplified amino alphabet associated with amyloidogenicity?
\end{frame}

\begin{frame}{Similarity index}
<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4,warning=FALSE>>=
si_dat <- read.csv2("si_dat.csv")

levels(si_dat[["et"]]) <- c("Best-performing simplified alphabet", 
                            "Simplified alphabet", "Full alphabet", 
                            "Standard simplified alphabet", 
                            "Standard simplified alphabet")


simil_plot <- ggplot(si_dat, aes(x=si, y=AUC_mean)) + 
  # geom_point(data = si_dat, 
  #            aes(x = si, y = AUC_mean, color = et, shape = et), size = 4) +
  #geom_density_2d(color = "black", contour = TRUE) +
    geom_bin2d(bins = 30) +
  # stat_density2d(aes(fill=..level..), color = "black",
  #                contour = TRUE, geom = "polygon", alpha = 0.5, binwidth = 50, bins = 10) +
  scale_fill_continuous("Count", low = "gold", high = "goldenrod4") +
  xlab("Similarity index") +
  ylab("AUC") +
  my_theme +
  geom_point(data = droplevels(filter(si_dat, et != "Simplified alphabet")),
             aes(x = si, y = AUC_mean, color = et, shape = et), size = 4) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2), 
         fill = guide_colorbar(barwidth = unit(5, "line"))) +
  scale_shape_manual("", values = c(16, 15, 15), drop = FALSE) +
  scale_color_manual("", values = c("red", "green", "blue"), drop = FALSE) +
  theme(panel.grid.major = element_line(color = "lightgrey", size = 0.5)) 

print(simil_plot)
@
Similarity index~\citep{stephenson_unearthing_2013} measures the similarity between two simplified alphabets (1 - identical, 0, totally dissimilar).
\end{frame}



\begin{frame}{Similarity index}
<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4,warning=FALSE>>=
print(simil_plot)
@
The color of a square is proportional to the number of simplified alphabets in its area.
\end{frame}

\begin{frame}{Similarity index}
<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4,warning=FALSE>>=
print(simil_plot)
@
The correlation between mean AUC an similarity index is significant ($\textrm{p-value} \leq 2.2^{-16}$; $\rho = 0.51$).
\end{frame}
   
\begin{frame}{}
Are informative n-grams found by QuiPT associated with amyloidogenicity?
\end{frame}


\begin{frame}{Informative n-grams}
<<echo = FALSE,message=FALSE,fig.align='center',fig.width=14,fig.height=6,warning=FALSE>>=
ngram_freq <- read.csv("ngram_freq.csv")

ngram_freq_plot <- mutate(ngram_freq, decoded_name = gsub("_", "-", decoded_name)) %>%
  mutate(decoded_name = factor(decoded_name, levels = as.character(decoded_name)),
         amyloid = diff_freq > 0) %>%
  melt() %>%
  filter(variable %in% c("pos", "neg"),
         association != "Not found") %>%
  droplevels %>%
  mutate(variable = factor(variable, labels = c("Amyloid", "Non-amyloid")))

ggplot(ngram_freq_plot, aes(x = decoded_name, y = value)) +
  geom_bar(aes(fill = variable), position = "dodge", stat = "identity") +
  geom_point(data = group_by(ngram_freq_plot, decoded_name)  %>% filter(value == max(value)),
             aes(y = value + 0.004, shape = association), size = 6) +
  scale_fill_manual("", values = c("gold", "darkmagenta")) +
  scale_shape_manual("Motif:", breaks = c("Amyloidogenic", "Non-amyloidogenic"), values = c(16, 17, NA)) +
  scale_y_continuous("Frequency") +
  scale_x_discrete("") +
  my_theme +
  theme(panel.grid.major.y = element_line(color = "lightgrey", size = 0.5)) 

@

Out of 65 the most informative n-grams, 15 (23\%) were also found in the motifs validated experimentally~\citep{paz_sequence_2004}.
\end{frame}


\begin{frame}{Benchmark results}

\begin{table}[ht]
\centering

\begin{tabular}{ccccc}
  \toprule
Classifier & AUC & MCC \\ 
  \midrule
AmyloGram & \textbf{0.8972} & \textbf{0.6307} \\ 
  \rowcolor{white}PASTA 2.0 \citep{walsh_pasta_2014} & 0.8550 & 0.4291  \\ 
   FoldAmyloid \citep{garbuzynskiy_foldamyloid:_2010} & 0.7351 & 0.4526  \\ 
  \rowcolor{white}APPNN \citep{familia_prediction_2015} & 0.8343 & 0.5823  \\ 
   \bottomrule
\end{tabular}
\end{table}

The predictor based on the best-performing alphabet, called AmyloGram, was benchmarked against the most popular tools for the detection of amyloid peptides using an external data set \textit{pep424}.

\footnotesize

\end{frame}

\begin{frame}{Benchmark results}

\begin{table}[ht]
\centering

\begin{tabular}{ccccc}
  \toprule
Classifier & AUC & MCC \\ 
  \midrule
AmyloGram & \textbf{0.8972} & \textbf{0.6307} \\ 
  \rowcolor{white}PASTA 2.0 \citep{walsh_pasta_2014} & 0.8550 & 0.4291  \\ 
   FoldAmyloid \citep{garbuzynskiy_foldamyloid:_2010} & 0.7351 & 0.4526  \\ 
  \rowcolor{white}APPNN \citep{familia_prediction_2015} & 0.8343 & 0.5823  \\ 
   \bottomrule
\end{tabular}
\end{table}

MCC (Matthew's Correlation Coefficient) measures the performance of a classifier (1 - classifier always properly recognizes amyloid proteins, -1 - classifier never properly recognizes amyloid proteins).

\footnotesize

\end{frame}



\begin{frame}{Experimental validation}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/diagram1.eps}
\end{figure}
\end{frame}

\begin{frame}{Experimental validation}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/diagram2.eps}
\end{figure}
\end{frame}

\section{Other applications}

\begin{frame}{Signal peptide prediction}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
grid.arrange(plot_pca(pca_full) + ggtitle("Full alphabet"),
             plot_pca(pca_naive) + ggtitle("Simplified alphabet"),
             ncol = 2)
@
PCA of amino acid frequency in signal peptides.

\end{frame}  


\begin{frame}{Signal peptide prediction}
\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}
SignalP 4.1~\citep{petersen_signalp_2011} combines output of two separate predictors:
\begin{itemize}
\item cleavage site,
\item signal peptide.
\end{itemize}
\end{frame}

\begin{frame}{Signal peptide prediction}

<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4,warning=FALSE>>=
source("my_ggplot_theme.R")
load("./results/fr_benchmark_full.RData")
load("./results/fr_benchmark_signalHsmm.RData")

dat <- unlist(fr_benchmark, recursive = FALSE) %>% 
  unlist(recursive = FALSE) %>% 
  do.call(rbind, .) %>% 
  lapply(unlist) %>% 
  data.frame() %>% 
  rename(MCC = MCC.MCC, AUC = AUC.AUC) %>% 
  mutate(classifier = "signalP",
         id = rep(sort(rep(1L:20, 2)), 9),
         sp = factor(sp, labels = c(20, 2, 4)),
         cs = factor(cs, labels = c(20, 2, 4))) %>% 
  mutate(sp = factor(sp, levels = levels(sp)[c(2, 3, 1)]),
         cs = factor(cs, levels = levels(cs)[c(2, 3, 1)]))

cmp_dat <- cbind(filter(dat, !plas),
                 filter(dat, plas) %>% 
                   select(MCC, AUC, mscsd) %>% 
                   rename(MCC_p = MCC, AUC_p = AUC, mscsd_p = mscsd))

filter(cmp_dat, sp != "4", cs != "4") %>%
  ggplot(aes(x = MCC, y = MCC_p)) +
  geom_point(aes(fill = sp), size = 3, shape = 21, color = "white") +
  geom_point(aes(color = cs), size = 4.5, shape = 1, stroke = 1.2) +
  my_theme +
  scale_x_continuous("MCC (other eukaryotes)") +
  scale_y_continuous("MCC (Plasmodiidae)") +
  scale_fill_discrete("Alphabet\n(signal peptide)") +
  scale_color_discrete("Alphabet\n(cleavage site)")
@
\end{frame}

\begin{frame}{Prediction of culturing conditions}
<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4,fig.width=4,warning=FALSE, out.height=150,out.width=170>>=
load("./results/venn_plots.RData")

grid.draw(venn_plots[[4]])
grid.newpage()
@
\url{metanogen.biotech.uni.wroc.pl}~\citep{jablonski2015methanogenic}

\end{frame}

\begin{frame}{Prediction of culturing conditions}
Results of nested cross-validation of MethanoGram.
\begin{table}[ht]
\centering
\begin{tabular}{ll}
  \hline
Culturing condition & Mean error \\ 
  \hline
Growth rate [h$^{-1}$] & 0.35 \\ 
Growth doubling time [h] &  27.19 \\ 
Optimal growth temp. [$^{\circ}$C] & 8.89 \\ 
Optimal growth pH & 0.47 \\ 
Optimal growth NaCl [mol/dm$^3$] & 0.21 \\ 
   \hline
\end{tabular}
\label{tab:nested_cv}
\end{table}

\end{frame}  



\begin{frame}{Summary}
\begin{enumerate}
\item Created algorithms effectively filtering n-grams.

\item Introduced new methods for search of simplified amino acids.

\item Implemented novel algorithms in the \textbf{R} package \textit{biogram}.

\item Applied the n-gram analysis framework to:
\begin{itemize}
\item prediction of amyloids (AmyloGram) (to appear in Scientific Reports),
\item prediction of atypical signal peptides,
\item prediction of culture conditions of methanogenes (MethanoGram).
\end{itemize}
\end{enumerate}
\end{frame}  

\begin{frame}{Summary}

Web servers:
\begin{itemize}
\item \textbf{AmyloGram}: \url{http://www.smorfland.uni.wroc.pl/shiny/AmyloGram/}.
\item \textbf{MethanoGram}: \url{http://www.smorfland.uni.wroc.pl/shiny/MethanoGram/}.
\item \textbf{signalHsmm}: \url{http://www.smorfland.uni.wroc.pl/shiny/signalHsmm/}.
\end{itemize}


Software packages:
\begin{itemize}
\item \textbf{biogram}: \url{https://cran.r-project.org/package=biogram}.
\item \textbf{AmyloGram}: \url{https://cran.r-project.org/package=AmyloGram}.
\end{itemize}


\end{frame}  

\begin{frame}{Acknowledgments}
Mentors:
\begin{itemize}
\item \textbf{Paweł Mackiewicz (University of Wrocław)}.
\item Lars Kaderali (University of Greifswald).
\item Małgorzata Kotulska (Wrocław University of Science and Technology).
\item Marcin Łukaszewicz (University of Wrocław).
\item Henrik Nielsen (Technical University of Denmark).
\item Stefan Rödiger (Brandenburg University of Technology Cottbus-Senftenberg).
\item Andreas Weinhäusel (Austrian Institute of Technology).
\end{itemize}
\end{frame}


\begin{frame}{Acknowledgments}
Peers:
\begin{itemize}
\item Agata Błaszczyńska (Wrocław University of Science and Technology).
\item Anna Duda-Madej (Wrocław Medical University).
\item Przemysław Gagat (University of Wrocław).
\item Marlena G\k{a}sior-Głogowska (Wrocław University of Science and Technology).
\item Sławomir Jabłoński (University of Wrocław).
\item Rafał Kolenda (Sanger Institute).
\item Chris Lauber (Technical University Dresden).
\item Natalia Niedzielska (Wrocław University of Science and Technology).
\item Piotr Sobczyk (Wrocław University of Science and Technology).
\end{itemize}

\end{frame}

\begin{frame}{Acknowledgments}
Funding:
\begin{itemize}
\item National Science Center (Preludium and Etiuda).
\item COST ACTION CA15110 (Harmonising standardisation strategies to increase efficiency and competitiveness of European life-science research).
\item KNOW Wrocław Center for Biotechnology.
\end{itemize}

\end{frame}

\begin{frame}[allowframebreaks]{Publications}

\small
\begin{enumerate}
\item \textbf{Burdukiewicz, M.}, Sobczyk, P., Rödiger, S., Duda-Madej, A., Mackiewicz, P., and Kotulska, M. (2017). Amyloidogenic motifs revealed by n-gram analysis. Scientific Reports (accepted).

\item Rödiger, S., \textbf{Burdukiewicz, M.}, Spiess, A.-N., and Blagodatskikh, K. (2017). Enabling reproducible real-time quantitative PCR research: the RDML package. Bioinformatics.

\item Schiebel, J., Böhm, A., Nitschke, J., \textbf{Burdukiewicz, M.}, Weinreich, J., Ali, A., Roggenbuck, D., Rödiger, S., and Schierack, P. (2017). Genotypic and phenotypic characteristics in association with biofilm formation in different pathotypes of human clinical Escherichia coli isolates. Appl. Environ. Microbiol. AEM.01660-17.

\item \textbf{Burdukiewicz, M.}, Rödiger, S., Sobczyk, P., Menschikowski, M., Schierack, P., and Mackiewicz, P. (2016a). Methods for comparing multiple digital PCR experiments. Biomolecular Detection and Quantification 9, 14–19.

\item \textbf{Burdukiewicz, M.}, Sobczyk, P., Rödiger, S., Duda-Madej, A., Mackiewicz, P., and Kotulska, M. (2016b). Prediction of amyloidogenicity based on the n-gram analysis. PeerJ Preprints.

\item Spiess, A.-N., Rödiger, S., \textbf{Burdukiewicz, M.}, Volksdorf, T., and Tellinghuisen, J. (2016). System-specific periodicity in quantitative real-time polymerase chain reaction data questions threshold-based quantitation. Scientific Reports.

\item Rödiger, S., \textbf{Burdukiewicz, M.}, Blagodatskikh, K., Jahn M., and Schierack, P. (2016). R as an Environment for Reproducible Analysis of DNA Amplification Experiments (R Journal).

\item Rödiger, S., \textbf{Burdukiewicz, M.}, and Schierack, P. (2015). chipPCR: an R package to pre-process raw data of amplification curves. Bioinformatics 31, 2900–2902.

\item Spiess, A.-N., Deutschmann, C., \textbf{Burdukiewicz, M.}, Himmelreich, R., Klat, K., Schierack, P., and Rödiger, S. (2015). Impact of Smoothing on Parameter Estimation in Quantitative DNA Amplification Experiments. Clinical Chemistry 61, 379–388.

\item Kolenda, R., \textbf{Burdukiewicz, M.}, and Schierack, P. (2015). A systematic review and meta-analysis of the epidemiology of pathogenic Escherichia coli of calves and the role of calves as reservoirs for human pathogenic E. coli. Frontiers in Cellular and Infection Microbiology 5.
\end{enumerate}

\end{frame}

\begin{frame}{Summary}
\begin{enumerate}
\item Created a new algorithm for effective filtering of n-grams.

\item Introduced new methods for search of simplified amino acids.

\item Implemented novel algorithms in the \textbf{R} package \textit{AmyloGram}.

\item Applied the n-gram analysis framework to:
\begin{itemize}
\item prediction of amyloids (AmyloGram),
\item prediction of atypical signal peptides,
\item prediction of culture conditions of methanogenes (MethanoGram).
\end{itemize}
\end{enumerate}
\end{frame}  


\begin{frame}[allowframebreaks]
        \frametitle{References}
  \bibliographystyle{apalike}
  \bibliography{references}
\end{frame}  

\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=

set.seed(3)
exdat <- data.frame(
  alph = paste0("A", 1L:5), 
  c1 = 0.7 + runif(5)/5,
  c2 = 0.75 + runif(5)/5,
  c3 = 0.65 + runif(5)/5
) %>% 
  melt %>% 
  group_by(variable) %>% 
  mutate(r = rank(value)) %>% 
  ungroup

best_alph <- group_by(exdat, alph) %>%
  summarise(cr = sum(r)) %>%
  arrange(desc(cr)) %>% 
  slice(1) %>% 
  select(alph) %>% 
  unlist %>% 
  as.character

exdat <- mutate(exdat, best = alph == best_alph)

ggplot(exdat, aes(y = variable, x = value, color = alph)) +
  geom_point(size = 4) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  my_theme

@
\end{frame}


\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, label = (r - 6)*-1)) +
  geom_text(size = 4) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best simplified alphabet") +
  my_theme


@
We rank alphabets separately in all length categories assuming the rank 1 for the best AUC, rank 2 for the second best AUC and so on.


\end{frame}



\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.height=4>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, shape = best)) +
  geom_point(size = 4) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best simplified alphabet") +
  my_theme


@
The best-performing alphabet has the lowest sum of ranks.  

\end{frame}


\end{document}