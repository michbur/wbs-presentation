\documentclass{beamer}
\usetheme{metropolis}
\usepackage[utf8]{inputenc}
\usepackage{amsfonts}
\usepackage{amsmath}
\usepackage{natbib}
\usepackage{graphicx}
\usepackage{array,booktabs,tabularx}
\usepackage{epstopdf}
\usepackage{colortbl, xcolor}
\usepackage{url}
\usepackage[MeX,T1,plmath]{polski}

\newcommand\Fontvi{\fontsize{6}{7.2}\selectfont}

\title{Predicting properties of biological sequences using n-gram analysis}
\date{}
\author{Michał Burdukiewicz}
\institute{Department of Genomics, University of Wrocław}

\begin{document}

  <<knitrIntro, echo = FALSE, message=FALSE,warning=FALSE>>=
source("my_ggplot_theme.R")

library(dplyr)
library(reshape2)
library(xtable)
library(biogram)
library(seqinr)

source("script.R")  

print_bt <- function(x) {
  rws <- 0L:(nrow(x) - 1)
  col <- c("\\rowcolor{green!10}", "\\rowcolor{blue!10}", "\\rowcolor{red!10}", "\\rowcolor{yellow!10}")
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE)
}

print_bt2 <- function(x) {
  rws <- seq(1, nrow(x) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  print(xtable(x, digits = 0), booktabs = TRUE,
        add.to.row = list(pos = as.list(rws), command = col),
        print.results = FALSE, include.rownames = FALSE)
}  
  
cls <- c("\\colorbox{green!10}", "\\colorbox{blue!10}", "\\colorbox{red!10}", "\\colorbox{yellow!10}")

group2df <- function(group_list, caption = NULL, label = NULL) {
  tab <- data.frame(Groups = sapply(group_list, function(i)
    paste0(toupper(sort(i)), collapse = ", ")))
  tab <- cbind(ID = 1L:nrow(tab), tab)
  rws <- seq(1, nrow(tab) - 1, by = 2)
  col <- rep("\\rowcolor[gray]{0.85}", length(rws))
  colnames(tab) <- c("Subgroup ID", "Amino acids")
  res <- print(xtable(tab, caption = caption, label = label), 
               include.rownames = FALSE, booktabs = TRUE,
               add.to.row = list(pos = as.list(rws), command = col), print.results = FALSE, 
               caption.placement = "top", sanitize.text.function = identity, 
               sanitize.rownames.function = identity)
  #res
  print(xtable(tab))
}  
  
amyloids_plot <- read.csv("amyloid_plot_data.csv")

levels(amyloids_plot[["et"]]) <- c("Best-performing simplified alphabet", 
                                   "simplified alphabet", "Full alphabet", 
                                   "Standard simplified alphabet")


amyloids_plot[["len_range"]] <- factor(amyloids_plot[["len_range"]], 
                                       levels = c("Test peptide length: 6 ", "Test peptide length: 7-10", 
                                                  "Test peptide length: 11-15", "Test peptide length: 16-25"))

subdat <- filter(amyloids_plot, pos == "Training peptide length: 6")

best_enc <- list(c("G"), 
                 c("K", "P", "R"),
                 c("I", "L", "V"),
                 c("F", "W", "Y"),
                 c("A", "C", "H", "M"),
                 c("D", "E", "N", "Q", "S", "T"))
names(best_enc) <- 1L:6


@
  

\maketitle

\begin{frame}{} 

\textit{In silico} research allows scientists to more efficiently design experimentl studies.

Examples: 

\begin{itemize}
\item prediction of protein properties (presence of signal peptides, amyloidogenicity),  
\item predicting culture conditions.
\end{itemize}

\end{frame}   
  
\begin{frame}{Amyloid proteins}

Amyloid are proteins associated with various diseases (e.g., Alzheimer’s,
Creutzfeldt-Jakob’s and Huntington’s diseases) which are able to form harmful aggregates.

\begin{figure} 
\includegraphics[width=0.61\textwidth]{static_figure/amyloid_aggregates.jpg}
\end{figure}

\footnotesize
Amyloid aggregates (red) around neurons (green). Strittmatter Laboratory, Yale University.

\end{frame}  

  
\begin{frame}{Amyloid proteins}

Hot-spots:
\begin{itemize}
\item short (6-15 amino acids),
\item very high variability of amino acid composition,
\item initiate amyloid aggregation,
\item create specific "zipper-like" $\beta$-structures.
\end{itemize}

\begin{figure} 
\includegraphics[width=0.9\textwidth]{static_figure/zipper_structure.jpg}
\end{figure}

\footnotesize\citet{sawaya_atomic_2007}
\end{frame}
  
\begin{frame}{Signal peptides}

\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}

Signal peptides:
        \begin{itemize}[<+->]
          \item are short (20-30 residues) N-terminal amino acid sequences forming $\alpha$-helices,
            \item direct proteins to the endomembrane system and next to extra- or intracellular localizations,
            \item are universal enough to direct properly proteins in different secretory systems.
        \end{itemize}
\end{frame}


  
\begin{frame}{Signal peptides}

\begin{figure} 
\includegraphics[width=0.75\textwidth]{static_figure/SP.png}
\end{figure}

Signal peptides possess three distinct domains with variable length and characteristic amino acid composition~\citep{hegde_surprising_2006}:
      \begin{itemize}
        \item n-region: mostly basic residues~\citep{nielsen_prediction_1998},
        \item h-region: strongly hydrophobic residues~\citep{nielsen_prediction_1998},
        \item c-region: a few polar, uncharged residues.
      \end{itemize}
\end{frame}


%Peptydy sygnałowe rozpoczynają się naładowanym dodatnio n-regionem, po którym występuje hydrofobowy h-region i c-region zakończony miejscem cięcia rozpoznawanym przez peptydazę sygnałową. 

  
\begin{frame}{Signal peptides}  
Amino acid composition of signal peptides differ between Plasmodium sp. and other eukaryotes. Therefore, predictors of signal peptides do not detect malarial signal peptides accurately.

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4,results='asis'>>=
plot_pca(pca_full)
  #ggtitle("PCA częstości aminokwasów w peptydach sygnałowych")
@  

PCA of amino acid frequency in signal peptides.
\end{frame}  

\begin{frame}{n-grams}
n-grams (k-tuples, k-mers):
\begin{itemize}
\item subsequences (continuous or gapped) of $n$ residues,
\item considers the context of a specific residue.
\end{itemize}


<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seqs <- read.fasta("./data/seqs.fasta", seqtype = "AA")
seq_df <- lapply(seqs, function(i) i[1L:27]) %>% 
  do.call(rbind, .) %>% 
  cbind(name = sub(">", "", sapply(seqs, function(i) attr(i, "Annot"))), .) %>% 
  data.frame

colnames(seq_df)[-1] <- paste0("P", 1L:27)

mseq_df <- melt(seq_df, id.vars = "name",
     value.name = "aa", variable.name = "pos") %>% 
  mutate(aa = factor(aa, levels = a()[-1])) %>% 
  mutate(pos = as.numeric(sub("P", "", pos))) %>% 
  mutate(name = factor(gsub(" ", "\n", name))) %>% 
  mutate(name = relevel(name, "Plasmodium\nfalciparum")) %>% 
  mutate(sig = pos == "25") %>% 
  inner_join(data.frame(aa = a()[-1], hydr = aaprop[2, ]))

sample_seq <- as.matrix(seq_df[, 2L:10])
colnames(sample_seq) <- paste0("P", 1L:ncol(sample_seq))
rownames(sample_seq) <- paste0("S", 1L:4)
sample_seq_dat <- data.frame(sample_seq)

print(xtable(sample_seq_dat[1, 1L:5], include.rownames = FALSE, booktabs = TRUE))
@


2-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 2, aa_v, d = 0) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " - ", x = .) %>% 
  cat(sep = ", ")
@

2-grams (gap 1):
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 2, aa_v, d = 1) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " -- ", x = .) %>% 
  cat(sep = ", ")
@

3-grams:
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=5,results='asis'>>=
seq2ngrams(sample_seq[1, 1L:5, drop = FALSE], 3, aa_v, d = 0) %>% 
  decode_ngrams %>% 
  #paste0(",") %>%
  gsub("_", " -- ", x = .) %>% 
  cat(sep = ", ")
@
\end{frame}  

\begin{frame}{n-grams}  
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
L <- 5
m <- 20 
m2 <- 6
n <- 1:5
n_max <- L*m^n
n_max2 <- L*m2^n
#dat <- data.frame(n = c(n, n), n_max = c(n_max, n_max2), m = c(rep(m, 5), rep(m2, 5)))
dat <- data.frame(n = n, n_max = n_max, m = rep(m, 5))
dat[["m"]] <- factor(dat[["m"]])

ggplot(dat, aes(x = n, y = n_max, color = m, label = formatC(n_max, digits = 4))) + 
  geom_line(linetype="dotted", size=1.5) + 
  geom_point(size=4, shape=16) +
  geom_text(size = 4, vjust = -1.5, hjust = "inward", color = "red") +
  coord_cartesian(ylim = c(1, 4.5e7)) +
  scale_x_continuous("n", breaks = 0L:5) +
  scale_y_continuous("Total number of n-grams (log-scale)",
                     trans = "log10") +
  scale_color_discrete("Alphabet size") +
  my_theme
@
n-grams create very large datasets, which are hard to process and analyze.
\end{frame}

\begin{frame}{Quick Permutation Test}
  Informative n-grams are usually selected using permutation tests.

During a permutation test we shuffle randomly class labels and compute a defined statistic (e.g. information gain). Values of statistic for permuted data are compared with the value of statistic for original data.

$$
\textrm{p-value} = \frac{N_{T_P > T_R}}{N} $$

$N_{T_P > T_R}$: number of cases, where $T_P$ (permuted test statistic) has more extreme values than $T_R$ (test statistic for original data).

$N$: number of permutations.
  \end{frame}
  
\begin{frame}{QuiPT}  
  
  \textbf{Qui}ck \textbf{P}ermutation \textbf{T}est is a fast alternative to permutation tests for n-gram data. It also allows precise estimation of p-value.

QuiPT is avaible as part of the \textbf{biogram} R package.
\end{frame}

\begin{frame}{QuiPT}  

<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=3.6,results='asis'>>=
load("data/times2.RData")

times_dat <- do.call(rbind, lapply(times, function(i) 
  t(sapply(i, function(j) {
    c(slow = unname(j[["slow"]]["elapsed"]),
      quick = unname(j[["quick"]]["elapsed"]))
  }))
)) %>% 
  data.frame %>% 
  mutate(size = sort(rep(1L:5*10, 10))) %>% 
  melt(id.vars = "size") %>% 
  group_by(size, variable) %>% 
  summarise(value = mean(value)) %>% 
  ungroup %>% 
  mutate(variable = factor(variable, labels = c("Permutation test", "QuiPT")))

ggplot(times_dat, aes(x = size, y = value, color = variable)) +
  geom_point() +
  geom_line(linetype = "dotted") +
  scale_y_continuous("Computation time [s]") +
  scale_x_continuous("Number of tested n-grams") +
  scale_color_manual("Test", values = c("red", "blue")) +
  my_theme
@

QuiPT is faster than classical permutation tests and returns exact p-values.
\end{frame}

\section{Simplified alphabets}

\begin{frame}
Simplified alphabets:
\begin{itemize}
\item are based on grouping amino acids with similar physicochemical properties,
\item ease computational analysis of a sequence~\citep{murphy_simplified_2000},
\item create more interpretable models.
\end{itemize}
\end{frame}


\begin{frame}  
Two sequences that are drastically different considering their amino acids composition can have the same physicochemical properties.


<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq1 <- c("f", "k", "v", "w", "p", "d", "h", "g", "s", "g")
seq2 <- c("y", "m", "c", "i", "y", "r", "a", "q", "t", "n")
@

Sequence I: 

\texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}}

\medskip

Sequence II: 

\texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}}

\end{frame}  


\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
seq_dat <- rbind(data.frame(seq = "Sequence I", pos = 1L:10, 
                            aa = seq1, val = aaprop["ARGP820101", seq1]),
                 data.frame(seq = "Sequence II", pos = 1L:10, 
                            aa = seq2, val = aaprop["ARGP820101", seq2])) %>% 
  mutate(hydroph = val < 0.4)

ggplot(seq_dat, aes(x = factor(pos), y = val, label = toupper(aa), 
                    group = seq, colour = hydroph)) +
  geom_text(vjust = "outward", size = 5, show_guide = FALSE) +
  #geom_point(size = 0) +
  geom_line(linetype = "dotted", color = "black") +
  facet_wrap(~ seq, ncol = 1) +
  scale_x_discrete("Position") +
  scale_y_continuous("Hydrophobicity (Argos et al., 1982)", expand = c(.1, .1)) +
  #scale_color_discrete("Hydrofobowy")
  #guides(colour = guide_legend(override.aes = list(size=4))) +
  my_theme 
@

\end{frame}  

\begin{frame}
\begin{table}
\begin{tabular}{cl}
\toprule
Subgroup & Amino acid \\ 
\midrule
  1 & C, I, L, K, M, F, P, W, Y, V \\ 
\rowcolor[gray]{0.85}  2 & A, D, E, G, H, N, Q, R, S, T \\ 
\bottomrule
\end{tabular}
\end{table}

\begin{columns}
\begin{column}{0.44\textwidth}
 
Sequence I: \texttt{\Sexpr{toupper(paste0(seq1, collapse = ""))}} \textrightarrow

Sequence II: \texttt{\Sexpr{toupper(paste0(seq2, collapse = ""))}} \textrightarrow

\end{column}
\begin{column}{0.5\textwidth}  %%<--- here

\texttt{\Sexpr{paste0(c(rep(1, 5), rep(2, 5)), collapse = "")}}

\texttt{\Sexpr{paste0(c(rep(1, 5), rep(2, 5)), collapse = "")}}
\end{column}
\end{columns}
\end{frame}  

\begin{frame}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.height=4.5,results='asis'>>=
grid.arrange(plot_pca(pca_full) + ggtitle("Full alphabet"),
             plot_pca(pca_naive) + ggtitle("Simplified alphabet"),
             ncol = 2)
@
PCA of amino acid frequency in signal peptides.

\end{frame}  

\section{Prediction of amyloidogenicity}

\begin{frame}{AmyloGram}
AmyloGram: oparte o redukcję alfabetów i kodowanie n-gramowe narzędzie do predykcji białek amyloidogennych~\citep{burdukiewicz_prediction_2016}.
\end{frame}


\begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=

ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = NA, outlier.shape = 16, outlier.size = 5, color = NA, fill = NA) +
  geom_point(data = filter(subdat, et == "Full alphabet"), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 5) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[3], drop = TRUE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[3], drop = TRUE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@
\end{frame}


\begin{frame}
  Does amyloidogenicity depend on the exact sequence of amino acids?
  \end{frame}

\begin{frame}{Standard simplified amino acid alphabets}
To date, several simplified amino acid alphabets have been proposed, which have been applied to (among others) protein folding and protein structure prediction~\citep{kosiol_new_2004, melo_accuracy_2006}.
  \end{frame}
  
    \begin{frame}{Standard simplified amino acid alphabets}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/ngram2.eps}
\end{figure}


  \end{frame}


    \begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = NA, outlier.shape = 16, outlier.size = 5, color = NA, fill = NA) +
  geom_point(data = filter(subdat, et %in% c("Full alphabet", "Standard simplified alphabet")), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 5) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[3L:4], drop = TRUE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[3L:4], drop = TRUE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@

Standard simplified amino acid alphabets do not enhance discrimination between amyloidogenic and non-amyloidogenic proteins.
  
  \end{frame}


\begin{frame}{Novel simplified amino acid alphabets}

\begin{itemize}
\item 17 measures handpicked from AAIndex database: 
  \begin{itemize}
    \item size of residues, 
    \item hydrophobicity, 
    \item solvent surface area, 
    \item frequency in $\beta$-sheets,
    \item contactivity.
  \end{itemize}
  \item 524 284 amino acid simplified alphabets with different level of amino acid alphabet reduction (three to six amino acid groups).
  \end{itemize}

    \end{frame}
  
    \begin{frame}{Novel simplified amino acid alphabets}
\begin{figure} 
\includegraphics[width=0.95\textwidth]{static_figure/ngram3.eps}
\end{figure}
  \end{frame}



\begin{frame}{Cross-validation}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
subdat2 <- droplevels(filter(subdat, et != "Best-performing simplified alphabet"))

ggplot(subdat2, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = "grey", outlier.shape = 16, outlier.size = 5, color = "black", fill = "white") +
  geom_point(data = filter(subdat2, et %in% c("Full alphabet", "Standard simplified alphabet")), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 5) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15)[2L:4], drop = FALSE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue")[2L:4], drop = FALSE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()

@
  \tiny
Hinges of boxes correspond to 
the 0.25 and 0.75 quartiles. The bar inside the box represents the median. The 
gray circles correspond to the simplified alphabets with the AUC outside the 0.95 
confidence interval.

  
  \end{frame}

\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=

set.seed(3)
exdat <- data.frame(
  alph = paste0("A", 1L:5), 
  c1 = 0.7 + runif(5)/5,
  c2 = 0.75 + runif(5)/5,
  c3 = 0.65 + runif(5)/5
) %>% 
  melt %>% 
  group_by(variable) %>% 
  mutate(r = rank(value)) %>% 
  ungroup

best_alph <- group_by(exdat, alph) %>%
  summarise(cr = sum(r)) %>%
  arrange(desc(cr)) %>% 
  slice(1) %>% 
  select(alph) %>% 
  unlist %>% 
  as.character

exdat <- mutate(exdat, best = alph == best_alph)

ggplot(exdat, aes(y = variable, x = value, color = alph)) +
  geom_point(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  my_theme

@
\end{frame}


\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, label = (r - 6)*-1)) +
  geom_text(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best simplified alphabet") +
  my_theme


@
We rank alphabets separately in all length categories assuming the rank 1 for the best AUC, rank 2 for the second best AUC and so on.


\end{frame}



\begin{frame}{Ranking alphabets}
<<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
ggplot(exdat, aes(y = variable, x = value, color = alph, shape = best)) +
  geom_point(size = 7) +
  scale_x_continuous("AUC") +
  scale_y_discrete("Category", labels = paste0("Category ", 1L:3)) +
  scale_color_discrete("Alphabet") +
  scale_shape_discrete("Best simplified alphabet") +
  my_theme


@
The best-performing alphabet has the lowest sum of ranks.  

\end{frame}

  
    \begin{frame}{The best-perfoming simplified alphabet}
  <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=

ggplot(subdat, aes(x = len_range, y = AUC_mean)) +
  geom_boxplot(outlier.color = "grey", outlier.shape = 16, outlier.size = 5) +
  geom_point(data = filter(subdat, et != "simplified alphabet"), 
             aes(x = len_range, y = AUC_mean, color = et, shape = et), size = 5) +
  scale_x_discrete("") +
  scale_y_continuous("Mean AUC") +
  scale_shape_manual("", values = c(16, 16, 15, 15), drop = FALSE) +
  scale_color_manual("", values = c("red", "grey", "green", "blue"), drop = FALSE) +
  guides(color = guide_legend(nrow = 2), shape = guide_legend(nrow = 2)) + 
  #facet_wrap(~ pos, nrow = 3) +
  ggtitle("Training peptide length: 6") + 
  my_theme + 
  coord_flip()
@
  \end{frame}

     \begin{frame}{The best-perfoming simplified alphabet}
   <<echo = FALSE, message=FALSE,warning=FALSE,fig.align='center',fig.width=14,fig.height=7>>=
# cat(group2df(best_enc, caption = "The best-performing simplified alphabet."))
 @
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor[gray]{0.85}  2 & K, P, R \\ 
    3 & I, L, V \\ 
   \rowcolor[gray]{0.85}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
   \end{frame}

     \begin{frame}{The best-perfoming simplified alphabet}
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor[gray]{0.85}  2 & K, P, R \\ 
   \rowcolor{blue!20} 3 & I, L, V \\ 
   \rowcolor{blue!20}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
Group 3 and 4 - hydrophobic amino acids.  
   \end{frame}
  
  
     \begin{frame}{The best-perfoming simplified alphabet}
   \begin{table}[ht]
\centering
\begin{tabular}{rl}
  \toprule
Subgroup ID & Amino acids \\ 
  \midrule
  1 & G \\ 
   \rowcolor{red!20}  2 & K, P, R \\ 
    3 & I, L, V \\ 
   \rowcolor[gray]{0.85}  4 & F, W, Y \\ 
    5 & A, C, H, M \\ 
   \rowcolor[gray]{0.85}  6 & D, E, N, Q, S, T \\ 
   \bottomrule
\end{tabular}
\end{table}
   
Group 2 - charged breakers of $\beta$-structures.  
   
   \end{frame}  
   
\begin{frame}{Porównanie z innymi klasyfikatorami}

\begin{table}[ht]
\centering

\begin{tabular}{ccccc}
  \toprule
Klasyfikator & AUC & MCC \\ 
  \midrule
AmyloGram & \textbf{0.8972} & \textbf{0.6307} \\ 
  \rowcolor{white}PASTA 2.0 \citep{walsh_pasta_2014} & 0.8550 & 0.4291  \\ 
   FoldAmyloid \citep{garbuzynskiy_foldamyloid:_2010} & 0.7351 & 0.4526  \\ 
  \rowcolor{white}APPNN \citep{familia_prediction_2015} & 0.8343 & 0.5823  \\ 
   \bottomrule
\end{tabular}
\end{table}

AUC (Area Under the Curve): miara jakości predykcji (1: idealny dobry klasyfikator, 0: idealnie zły klasyfikator).

MCC (Matthew's Correlation Coefficient): miara jakości predykcji (1: idealny dobry klasyfikator, -1: idealnie zły klasyfikator).

\footnotesize

AmyloGram porównano z innymi klasyfikatorami na zewnętrznym zbiorze danych \textit{pep424}.
\end{frame}


\begin{frame}{Walidacja eksperymentalna}
\begin{enumerate}
\item Wszystkie nieamyloidowe peptydy z bazy AmyLoad zanalizowano AmyloGramem. 
\item Wybrano 8 peptydów z najwyższym prawdopodobieństwem amyloidogenności.
\item Peptydy zbadano przy pomocy spektroskopii fourierowskiej (FTIR).
\item Wyniki potwierdzono esejami z czerwienią Kongo i tioflawiną.
\end{enumerate}
\end{frame}

\begin{frame}{Walidacja eksperymentalna}

<<echo = FALSE,message=FALSE,fig.align='center',fig.height=4.9,warning=FALSE>>=
ftir_res <- read.csv("ftir_amylogram_pasta2_literature.csv")

ftir_res_agg <- ftir_res %>% 
  group_by(amyl_db, amyl_ftir) %>% 
  summarise(count = n()) %>% 
  ungroup() %>% 
  mutate(amyl_db = factor(amyl_db, labels = c("Nieamyloid", "Amyloid")),
         amyl_ftir = factor(amyl_ftir, labels = c("Nieamyloid", "Amyloid"))) %>% 
  filter(amyl_db == "Nieamyloid",
         !is.na(amyl_ftir)) %>% 
  mutate(count = ifelse(count == 7, 4, count)) %>% 
  rbind(data.frame(amyl_db = "Nieamyloid", amyl_ftir = "Amyloid", count = 3)) %>% 
  mutate(frac = count/sum(count),
         count_nice = ifelse(count > 2, paste0(count, " peptydy"), paste0(count, " peptyd")),
         amyl_db = factor(c("brak danych", 
                            "brak danych", 
                            "amyloid")))

ggplot(ftir_res_agg, aes(x = amyl_ftir, y = frac, fill = amyl_db,
                         label = count_nice)) +
  geom_bar(stat = "identity") +
  geom_text(position = position_stack(vjust=0.5), color = "white", size = 4) +
  scale_y_continuous("Frakcja peptydów") +
  scale_x_discrete("Wynik FTIR") +
  scale_fill_manual("Dane literaturowe", values = c("darkred", "navyblue"),
                    na.value = "gray47") +
  my_theme
@

\end{frame}

\begin{frame}{Podsumowanie}
\begin{enumerate}
\item Stworzono algorytm efektywnie selekcjonujący informatywne n-gramy 
reprezentujące sekwencje aminokwasowe.

\item Opracowano metody poszukujące uproszczone 
alfabety aminokwasowe.

\item Opracowaną metodologię zastosowano do przewidywania białek 
amyloidogennych tworząc pakiet \textbf{R} i web server AmyloGram (\url{http://www.smorfland.uni.wroc.pl/shiny/AmyloGram/}).

\end{enumerate}
\end{frame}  

\begin{frame}{Perspektywy}
\begin{enumerate}
\item Zastosowanie opracowanej metodologii do przewidywania lokalizacji 
subkomórkowej białek.

\item Stworzenie oprogramowania wspierającego interpretowanie wyników analizy n-gramów i uproszczonych alfabetów.

\item Upublicznienie rozwijanych metod w postaci pakietu \textit{biogram} w środowisku programistycznym i statystycznym \textbf{R}.

\end{enumerate}
\end{frame}  

\begin{frame}[allowframebreaks]
        \frametitle{References}
  \bibliographystyle{apalike}
  \bibliography{references}
\end{frame}  



\end{document}